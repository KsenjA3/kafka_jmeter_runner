<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">

  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Database Query JDBC Test Plan" enabled="true">
      <stringProp name="TestPlan.comments">Test plan for monitoring the number of records in the messages table via JDBC</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>

    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="JDBC Monitor Thread Group">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <longProp name="ThreadGroup.delay">0</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
	  
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">benchmark</stringProp>
          <stringProp name="dbUrl">jdbc:postgresql://localhost:5432/benchmark</stringProp>
          <stringProp name="driver">org.postgresql.Driver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="username">benchmark</stringProp>
          <stringProp name="password">benchmark</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
        </JDBCDataSource>
        <hashTree/>

        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request: Get Initial Count" enabled="true">
          <stringProp name="dataSource">benchmark</stringProp>
          <stringProp name="query">SELECT COUNT(*) FROM messages;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">initialCount</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
		
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Calculate Expected Count" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">
                def metricsPerMessage = 4850
                def totalThreads = 3 // или получить из проперти/vars, если нужно

                def raw = vars.get("initialCount") ?: "[{count=0}]"
                def initialCount = raw.replaceAll(/[\[\]\{\}a-z=]/, "").trim().toInteger()
                def expectedCount = initialCount + metricsPerMessage * totalThreads
                def currentCount = 0
                
                vars.put("expectedCount", expectedCount.toString())
                vars.put("startWaitTime", String.valueOf(System.currentTimeMillis()))

                log.info("Initial Count: " + initialCount)
                log.info("Expected Count: " + expectedCount)
                log.info("Start Wait Time: " + vars.get("startWaitTime"))
            </stringProp>
          </JSR223PostProcessor>
          <hashTree/>
		  
        </hashTree>


        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait for all messages" enabled="true">
            <stringProp name="WhileController.condition">
                      ${__groovy(
                        def currentCountStr = vars.get('currentCount') ?: '0';
                          // Извлекаем только числовое значение с помощью регулярного выражения
                          def currentMatcher = (currentCountStr =~ /(\d+)/)
                          def currentCount = 0
                          if (currentMatcher.find()) {
                              currentCount = currentMatcher.group(1).toInteger()
                          }
                          
                        def expectedCount = Integer.parseInt(vars.get('expectedCount') ?: '0');
                        def startWaitTime = Long.parseLong(vars.get('startWaitTime') ?: '0');
                        def currentTime = System.currentTimeMillis();
                        def timeout = 600000; // 10 минут в миллисекундах
                        
                        (currentCount &lt; expectedCount) &amp;&amp; ((currentTime - startWaitTime) &lt; timeout);
                      )}
            </stringProp>
        </WhileController>
        <hashTree>

          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request: Count Messages" enabled="true">
            <stringProp name="dataSource">benchmark</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT COUNT(*) FROM messages;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultVariable">currentCount</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree/>

          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Log Vars to jmeter.log" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">
                  log.info("Loop Current : " + vars.get('currentCount'))
                  log.info("Loop Expected : " + vars.get('expectedCount'))                  
              </stringProp>
            </JSR223Sampler>
            <hashTree/>

        </hashTree>

          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Wait 100ms" enabled="true">
            <stringProp name="ConstantTimer.delay">100</stringProp>
          </ConstantTimer>
          <hashTree/>
		  
		  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Force Thread Stop" enabled="true">
			<stringProp name="scriptLanguage">groovy</stringProp>
			<stringProp name="parameters"></stringProp>
			<stringProp name="filename"></stringProp>
			<stringProp name="cacheKey">true</stringProp>
			<stringProp name="script">ctx.getThread().stop()</stringProp>
		  </JSR223Sampler>
		  <hashTree/>		  
		  

        </hashTree>


        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>

        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        
      </hashTree>
	  
    </hashTree>
  
</jmeterTestPlan>
