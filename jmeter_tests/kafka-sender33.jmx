<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Kafka 100-thread load" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>

      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Producers">
        <intProp name="ThreadGroup.num_threads">3</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>

        <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="KafkaProducer" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="bootstrap" elementType="Argument">
                <stringProp name="Argument.name">bootstrap</stringProp>
                <stringProp name="Argument.value">localhost:9094</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="topic" elementType="Argument">
                <stringProp name="Argument.name">topic</stringProp>
                <stringProp name="Argument.value">benchmark_topic</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="payloadB" elementType="Argument">
                <stringProp name="Argument.name">payloadB</stringProp>
                <stringProp name="Argument.value">100</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="messageKey" elementType="Argument">
                <stringProp name="Argument.name">messageKey</stringProp>
                <stringProp name="Argument.value">${__threadNum}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="acks" elementType="Argument">
                <stringProp name="Argument.name">acks</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="send.timeout.seconds" elementType="Argument">
                <stringProp name="Argument.name">send.timeout.seconds</stringProp>
                <stringProp name="Argument.value">15</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">org.solutions.jmeter_solution3.producers.KafkaProducerSampler</stringProp>
        </JavaSampler>
        <hashTree/>

      </hashTree>

      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Consumers">
        <intProp name="ThreadGroup.num_threads">3</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <longProp name="ThreadGroup.duration">1</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>

        <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="KafkaConsumer" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="bootstrap" elementType="Argument">
                <stringProp name="Argument.name">bootstrap</stringProp>
                <stringProp name="Argument.value">localhost:9094</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="topic" elementType="Argument">
                <stringProp name="Argument.name">topic</stringProp>
                <stringProp name="Argument.value">benchmark_topic</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="groupId" elementType="Argument">
                <stringProp name="Argument.name">groupId</stringProp>
                <stringProp name="Argument.value">jmeter_consumer_group_${__threadNum}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pollTimeoutMs" elementType="Argument">
                <stringProp name="Argument.name">pollTimeoutMs</stringProp>
                <stringProp name="Argument.value">500</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sampleDurationMs" elementType="Argument">
                <stringProp name="Argument.name">sampleDurationMs</stringProp>
                <stringProp name="Argument.value">1000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="messagesToRead" elementType="Argument">
                <stringProp name="Argument.name">messagesToRead</stringProp>
                <stringProp name="Argument.value">3</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">org.solutions.jmeter_solution3.consumers.KafkaConsumerSampler</stringProp>
        </JavaSampler>
        <hashTree/>
      </hashTree>

      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
        <boolProp name="ResultCollector.error_logging">false</boolProp> <!-- Не будет логировать ошибки в отдельный файл. -->
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time> <!-- Время выполнения сэмпла (запроса), т.е. сколько времени потребовалось для выполнения операции. -->
            <latency>true</latency> <!-- Задержка ответа — время между отправкой запроса и получением первого байта ответа.-->
            <timestamp>true</timestamp> <!-- Метка времени (дата и время), когда был выполнен сэмпл. -->
            <success>true</success> <!-- Успешно ли выполнен запрос. Позволяет быстро увидеть, сколько запросов завершились успешно, а сколько - с ошибками.-->
            <label>true</label> <!-- Идентифицирует, какая именно операция была выполнена.-->
            <code>true</code> <!-- Код ответа. -->
            <message>true</message> <!-- Сообщение ответа. Предоставляет дополнительный контекст к коду ответа. -->
            <threadName>true</threadName> <!-- Имя потока, для отладки и понимания того, какой поток вызвал определенную проблему. -->
            <dataType>true</dataType> <!-- Тип данных ответа, для фильтрации и анализа ответов. -->
            <encoding>false</encoding> <!-- Кодировка ответа.  Если true, JMeter будет пытаться определить и сохранить кодировку. false для снижения накладных расходов.. -->
            <assertions>true</assertions> <!-- Успешно ли выполнены проверки. -->
            <subresults>true</subresults> <!-- Результаты подзапросов. Для детализации составных операций. -->
            <responseData>false</responseData> <!-- Тело ответа от сервера. -->
            <samplerData>false</samplerData> <!-- Данные запроса. -->
            <xml>false</xml> <!-- Формат сохранения результатов в XML. -->
            <fieldNames>true</fieldNames> <!-- Включать ли имена полей в заголовок CSV-файла, для удобства анализа экспортированных данных. -->
            <responseHeaders>false</responseHeaders> <!-- сохраняются ли заголовки ответа -->
            <requestHeaders>false</requestHeaders> <!-- сохраняются ли Заголовки запроса. -->
            <responseDataOnError>false</responseDataOnError> <!-- Сохранять ли Данные ответа при ошибке. false - означает, что ответ не сохраняется даже при ошибке.-->
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage> <!-- Сохранить ли сообщение об ошибке проверки. -->
            <assertionsResultsToSave>0</assertionsResultsToSave> <!-- Уровень детализации сохранения результатов проверок
                                                                      0: Только ошибки,  для нагрузочного тестирования, чтобы не перегружать отчеты.
                                                                      1: Только ошибки и неудачи.
                                                                      2: Все (успех/неудача/ошибка). -->
            <bytes>true</bytes> <!-- Количество байтов, полученных в ответе. -->
            <sentBytes>true</sentBytes> <!-- Количество байтов, отправленных в запросе. -->
            <url>true</url> <!--  Полный URL-адрес запроса. -->
            <threadCounts>true</threadCounts> <!-- Количество активных потоков на момент выполнения сэмпла. -->
            <idleTime>true</idleTime> <!-- Время простоя потока между выполнением текущего сэмпла и началом следующего. -->
            <connectTime>true</connectTime> <!-- Время, необходимое для установления соединения с сервером. -->
          </value>
        </objProp>
        <stringProp name="filename"></stringProp> <!-- Имя файла в который создается отчет. Не указываем, чтобы отчет создавался в папке jmeter_tests с именем указаным в батнике -->
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time> <!-- Время выполнения теста. -->
            <latency>true</latency> <!-- Задержка ответа. -->
            <timestamp>true</timestamp> <!-- Время отправки запроса. -->
            <success>true</success> <!-- Успешно ли выполнен запрос. -->
            <label>true</label> <!-- Имя запроса. -->
            <code>true</code> <!-- Код ответа. -->
            <message>true</message> <!-- Сообщение ответа. -->
            <threadName>true</threadName> <!-- Имя потока. -->
            <dataType>true</dataType> <!-- Тип данных. -->
            <encoding>false</encoding> <!-- Кодировка. -->
            <assertions>true</assertions> <!-- Успешно ли выполнены проверки. -->
            <subresults>true</subresults> <!-- Результаты подзапросов. -->
            <responseData>false</responseData> <!-- Данные ответа. -->
            <samplerData>false</samplerData> <!-- Данные запроса. -->
            <xml>false</xml> <!-- XML. -->
            <fieldNames>true</fieldNames> <!-- Имена полей. -->
            <responseHeaders>false</responseHeaders> <!-- Заголовки ответа. -->
            <requestHeaders>false</requestHeaders> <!-- Заголовки запроса. -->
            <responseDataOnError>false</responseDataOnError> <!-- Данные ответа при ошибке. -->
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage> <!-- Сохранить сообщение об ошибке проверки. -->
            <assertionsResultsToSave>0</assertionsResultsToSave> <!-- Сохранить результаты проверки. -->
            <bytes>true</bytes>  <!-- Размер отправленных данных. -->
            <sentBytes>true</sentBytes> <!-- Размер отправленных данных. -->
            <url>true</url> <!-- URL. -->
            <threadCounts>true</threadCounts> <!-- Количество потоков. -->
            <idleTime>true</idleTime> <!-- Время простоя. -->
            <connectTime>true</connectTime> <!-- Время подключения. -->
          </value>
        </objProp>
        <stringProp name="filename"></stringProp> <!-- Имя файла в который создается отчет. Не указываем, чтобы отчет создавался в папке jmeter_tests с именем указаным в батнике -->
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
